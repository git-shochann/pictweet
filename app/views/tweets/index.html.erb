<%= form_with(url: search_tweets_path, local: true, method: :get, class: "search-form") do |form| %>
  <%= form.text_field :keyword, placeholder: "投稿を検索する", class: "search-input" %>
  <%= form.submit "検索", class: "search-btn" %>
<% end %>

<%# 投稿を検索するform_with。データを保存しないためモデルクラスのインスタンス設定は行わない。 %>

<div class="contents row">
  <% @tweets.each do |tweet| %>
    <%= render partial: "tweet", locals: { tweet: tweet } %>
  <% end %>
  <%= paginate(@tweets) %>
</div>

<%# 8行目 tweet.idとできるのはtweetコントローラーにて記載してindexアクションのallメソッドで取得した@tweetsをeachメソッドで1つずつ処理している為tweet.idでそのhtmlで構成した画像が取得出来る %>
<%# ここでコントローラーのfind(params[:id]として取得するところで個々の削除したいidを取得する) %>
<%# link_toで行き先を指定するとき、ルーティングを設定してから、そこのコントローラーで動かしたいパスを明らかにするために、""" rails routes """で行き先を確認する。 %>

<%# ここでもコントローラーで全件ツイートを取得し、そこからuserテーブルを見に行っている == N+1問題 == 先にallではなくincludes(:user)でuserテーブルも関連づけて取得する。 %>

  <%# 10行目 %>
  <%# ログイン中ユーザーのid == 投稿したユーザーのidが一致すれば、編集・削除ボタンの表示を許可 %>